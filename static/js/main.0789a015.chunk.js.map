{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["module","exports","App","state","original","original2","flip","flip2","copyButton","copyMessage","handleInputChange","event","reverse","split","join","replace","value","target","name","setState","generatePalindrome","slice","copyPalindrome","palindrome","dummy","document","createElement","body","appendChild","setAttribute","getElementById","select","execCommand","removeChild","setTimeout","this","bind","className","style","margin","boxShadow","fontFamily","width","textAlign","border","borderRadius","marginTop","onChange","type","placeholder","maxLength","autoComplete","id","onClick","href","Component","withAuthenticator","includeGreetings","Boolean","window","location","hostname","match","awsmobile","Amplify","configure","config","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,sNCMrCC,E,2MAEJC,MAAQ,CACNC,SAAU,GACVC,UAAW,GACXC,KAAM,GACNC,MAAO,GACPC,YAAY,EACZC,YAAa,I,EAGfC,kBAAoB,SAAAC,GAAU,IAAD,EAEvBC,EAAU,EAAKT,MAAMC,SAASS,MAAM,IAAID,UAAUE,OAAOC,QAAQ,KAAM,IACvEC,EAAQL,EAAMM,OAAOD,MACrBE,EAAOP,EAAMM,OAAOC,KAGxB,EAAKC,UAAL,mBACGD,EAAOF,GADV,qBAEQJ,GAFR,K,EAOFQ,mBAAqB,WAEnB,GAAK,EAAKjB,MAAMC,SAAhB,CAGE,IAAIQ,EAAU,EAAKT,MAAMC,SAASS,MAAM,IAAIQ,MAAM,GAAI,GAAGT,UAAUE,OAAOC,QAAQ,KAAM,IAExF,EAAKI,SAAS,CACZd,UAAW,EAAKF,MAAMC,SACtBG,MAAOK,EACPJ,YAAY,M,EAMlBc,eAAiB,WAEf,IAAIC,EAAa,EAAKpB,MAAME,UAAY,EAAKF,MAAMI,MAE/CiB,EAAQC,SAASC,cAAc,SACnCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,aAAa,KAAM,YACzBJ,SAASK,eAAe,YAAYd,MAAQO,EAC5CC,EAAMO,SACNN,SAASO,YAAY,QACrBP,SAASE,KAAKM,YAAYT,GAE1B,EAAKL,SAAS,CACZV,YAAa,sBACbD,YAAY,IAGd0B,WACE,WACEC,KAAKhB,SAAS,CACZV,YAAa,GACbD,YAAY,KAGb4B,KANH,gBAOA,M,wEAOF,OACE,yBAAKC,UAAU,YAAYC,MAAO,CAAEC,OAAQ,SAAUC,UAAW,YAAaC,WAAY,SAAUC,MAAO,MAAOC,UAAW,SAAUC,OAAQ,YAAaC,aAAc,MAAOC,UAAW,SAC1L,oDACA,2BACET,UAAU,eACVnB,KAAK,WACLF,MAAOmB,KAAKhC,MAAMC,SAClB2C,SAAUZ,KAAKzB,kBACfsC,KAAK,OACLC,YAAY,mBACZC,UAAU,KACVC,aAAa,QAGf,4BAAQC,GAAG,sBAAsBC,QAASlB,KAAKf,oBAA/C,YAOA,6BACE,0CACc,8BAAOe,KAAKhC,MAAME,UAAW8B,KAAKhC,MAAMI,MAAxC,MACZ,4BAAQ6C,GAAG,kBAAkBC,QAASlB,KAAKb,eAAgBgB,MAAO,CAAE,QAAWH,KAAKhC,MAAMK,WAAa,SAAW,SAAlH,QACA,0BAAM8B,MAAO,CAAE,YAAa,OAAQ,QAAWH,KAAKhC,MAAMM,YAAc,eAAiB,SAAzF,WAA4G0B,KAAKhC,MAAMM,eAG3H,oCACQ,uBAAGQ,OAAO,SAASqC,KAAK,0CAAxB,yBADR,mB,GArGUC,aAkIHC,cAAkBtD,EAAK,CAAEuD,kBAAkB,IC5HtCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICNSC,EAVG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,6BAChC,MAAS,I,OCAbC,EAAQC,UAAUC,GAElBC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASK,eAAe,SFyH3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0789a015.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { withAuthenticator } from 'aws-amplify-react'\n\nclass App extends Component {\n\n  state = {\n    original: \"\",\n    original2: \"\",\n    flip: \"\",\n    flip2: \"\",\n    copyButton: false,\n    copyMessage: \"\"\n  }\n\n  handleInputChange = event => {\n\n    let reverse = this.state.original.split(\"\").reverse().join().replace(/,/g, '');\n    let value = event.target.value;\n    let name = event.target.name;\n    // console.log(reverse);\n\n    this.setState({\n      [name]: value,\n      flip: reverse\n    });\n\n  };\n\n  generatePalindrome = () => {\n\n    if (!this.state.original) {\n      return\n    } else {\n      let reverse = this.state.original.split(\"\").slice(0, -1).reverse().join().replace(/,/g, '');\n      // console.log(reverse);\n      this.setState({\n        original2: this.state.original,\n        flip2: reverse,\n        copyButton: true\n      })\n    }\n\n  }\n\n  copyPalindrome = () => {\n\n    let palindrome = this.state.original2 + this.state.flip2;\n    // console.log(palindrome);\n    var dummy = document.createElement(\"input\");\n    document.body.appendChild(dummy);\n    dummy.setAttribute(\"id\", \"dummy_id\");\n    document.getElementById(\"dummy_id\").value = palindrome;\n    dummy.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(dummy);\n\n    this.setState({\n      copyMessage: \"Copied to Clipboard\",\n      copyButton: false\n    })\n\n    setTimeout(\n      function () {\n        this.setState({\n          copyMessage: \"\",\n          copyButton: false\n        });\n      }\n        .bind(this),\n      3000\n    );\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"container\" style={{ margin: '0 auto', boxShadow: '10px 10px', fontFamily: 'Roboto', width: '80%', textAlign: 'center', border: '2px solid', borderRadius: '8px', marginTop: '50px' }}>\n        <h3>Palindrome Generator</h3>\n        <input\n          className=\"form-control\"\n          name=\"original\"\n          value={this.state.original}\n          onChange={this.handleInputChange}\n          type=\"text\"\n          placeholder=\"Enter palindrome\"\n          maxLength=\"50\"\n          autoComplete=\"off\"\n        >\n        </input>\n        <button id=\"generate-palindrome\" onClick={this.generatePalindrome}>Generate</button>\n        {/* <p>\n          Palindrome: {this.state.original}{this.state.flip}\n        </p>\n        <p name=\"flip\" value={this.state.flip}>\n          Palindrome: {this.state.flip}\n        </p> */}\n        <div>\n          <p>\n            Palindrome: <span>{this.state.original2}{this.state.flip2}  </span>\n            <button id=\"copy-palindrome\" onClick={this.copyPalindrome} style={{ 'display': this.state.copyButton ? 'inline' : 'none' }}>Copy</button>\n            <span style={{ 'font-size': '12px', 'display': this.state.copyMessage ? 'inline-block' : 'none'}}> &#9989; {this.state.copyMessage}</span>\n          </p>\n        </div>\n        <p>\n          Visit <a target=\"_blank\" href=\"http://www.michaelbenham.com/portfolio\">www.michaelbenham.com</a> to check!\n        </p>\n      </div>\n    )\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default withAuthenticator(App, { includeGreetings: true })\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:9d9c5c9f-ce4f-4d2d-96ca-9b34a9270a4c\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_ynaw4ssM5\",\n    \"aws_user_pools_web_client_id\": \"61ejul7dhl34i5tdqcnl0teldn\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nAmplify.configure(config)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}